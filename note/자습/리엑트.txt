특징
1. 자동 업그레이드
2. 재활용 용의
3. 코드정리 : html파일과 js파일 통합 (jsx문법)

#repl  .it 웹 코딩사이트
.jsx : 리엑트 확장자

index.html : 하나뿐인 html파일

main.jsx : 리엑트와 index.html파일의 브릿치

app.jsx: 작업공간

app.css : css작업공간


필수개념
1. 컴포넌트(component): 자작 태그, 다른 파일에 있는 코드를 태그화(함수화) 시켜 가져와 사용한다. 
2. 프롭스(props) : 속성값, 전달기능
3. 스테이트(state) : UI 업데이트 되는 변수,  retrun=>배열
		어려운 이유
		1. 비동기적임: 함수끝날떄 까지 기다렸다가 업데이트함
		2. 변수값 사용안함: 업데이트 할떄마다 새로운 함수 실행 = 초기화됨


환경구축 : 웹 코딩 사이트를 이용해도 됨 
	IDE : 버츄얼 스튜티오 코드 (node.js 필요)
		npx create-react-app .	

		npm start : 리엑트 동작 ->웹 페이지 오픈

리엑트 : 유저 인터페이스를 구축하기 위한 자바스크립트 라이브러리 
	라이브러리 : 자주사용되는 기능을 모아놓은 것
	유저인터페이스 : 상호작용을 하기위해 
   장점 : 	빠른 업데이트 : 화면이 바뀌는 속도(virual DOM)
	 & 랜더링 속도 : 
	재사용성 : 의존선 낮음
	앱 웹 동시개발 가능

    단점 : 방대한 학습량
	상태관리 복잡도

cra :  리엑트 자동 생성
	npx create-react-app 프로젝트 이름
	npm start

jsx : js + xml/html 코드, xml/html + {js} + xml/html 
    역할 : xml/html 코드를 js 코드로 변환
    장점 : 코드 간결화, 가독성 향상, 주소 직접입력을 통한 접속 차단

Elements : 요소, 성분 / 리엑트를 구성하는 가장 작은 블럭, 붕어빵 
	리엑트 Elements = DOM Elements의 가상표현
 	화면에 보이는 것을 기술
    모습 : JS 객체 형태, 
	불변성 : 생성후 변경 불가 
    랜더링 : root DOM node : 
	ReactDOM.render(element, document.getElementById('root'));
 	virual DOM=>Browser DOM으로 이동
----------------------------------------------------------------------
const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(
  <React.StrictMode>
    <jsx이름 />
  </React.StrictMode> 
);
-----------------------------------------------------------------------
Reacat.render(
  <React.StrictMode>
    <jsx이름 />
  </React.StrictMode>,
  document.getElementById('root')
);
-----------------------------------------------------------------------
    업테이트 : Elements 다시만들어야됨

Components : 객채지향언어의 객체같은 느낌? , 붕어빵기개의 틀
		함수와 비슷 : 

props : Components의 속성,컴포넌트에 들어갈 정보를 담고있는 자바스크립트 객체, 붕어빵의 재료
    특징 : 읽기전용(값을 변경할 수 없다.) 같은 props는 같은 components를 (결과) 만들어낸다.

Component : 항상 이름은 대문자로 시작해야 한다.
    함수 컴포넌트 : props를 받아 element를 반환한다.
    클래스 컴포넌트 : react.Component를 상속받아 쓴다.	 
	
	합성 : props값을 다르게하여 여러개의  component 생성
	추출 : 큰 component 쪼개기 ,재사용성 증가

State :  Component 데이터상태 = 변경가능한 데이터, 각개발자가 정의함
	렌더링, 테이터 흐름에 사용되는 값만 포함 !=> 인스턴스 빌드
	∴불필요한 경우의 렌더링 하는 경우를 막기위해=성능저하 방지
	자바스크립트 객체임

	직접수정 하지말것 (권고사항) setState사용할것

    라이프 사이클 : mountion - updating - ummounting 

hooks : 특정 시점 다른 함수와 함께 실행할 수 있도록 꼽사리끼는것??
    특징 : use를 앞에 붙인다.
	useState() : 함수컴포넌트의 상태(state)가 변할때 렌더링을 해준다.
		const [변수명, set함수명] = useState(초기값);
	    변수 각각 에 대한 set함수가 따로 존재함
	useEffect : <0
  